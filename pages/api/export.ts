import { NextApiRequest, NextApiResponse } from "next";
import {
  initialState as dosInitialState,
  initialWeek as dosInitialWeek,
  remoteWeeks as dosRemoteWeeks,
} from "./dos";

import {
  initialState as swiftInitialState,
  initialWeek as swiftInitialWeek,
  remoteWeeks as swiftRemoteWeeks,
} from "./swift";
import { getRemoteDays, RemoteDay } from "../../utils/remote-days";
import moment from "moment/moment";
import { getStringFromQueryParam } from "../../components/libs/api/api-utils";

const startHour = 0;
const eventDuration = 1;
const eventDurationUnit = "hour";

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const {
    query: {
      team: teamQuery,
      startDate: startDateQuery,
      endDate: endDateQuery,
      group: groupQuery,
    },
    method,
  } = req;

  if (method === "GET") {
    const startDateParam = getStringFromQueryParam(startDateQuery);
    const endDateParam = getStringFromQueryParam(endDateQuery);
    const team = getStringFromQueryParam(teamQuery);
    const group = getStringFromQueryParam(groupQuery);

    const startDate = new Date(startDateParam);
    const endDate = new Date(endDateParam);
    let auxDate = new Date(startDate.getFullYear(), startDate.getMonth(), 1);

    let initialState: number[];
    let initialWeek: Date;
    let remoteWeeks: number[][];

    if (team == "dos") {
      initialState = dosInitialState;
      initialWeek = dosInitialWeek;
      remoteWeeks = dosRemoteWeeks;
    } else if (team == "swift") {
      initialState = swiftInitialState;
      initialWeek = swiftInitialWeek;
      remoteWeeks = swiftRemoteWeeks;
    } else {
      res.status(400).send("Unknown Team");
      return;
    }

    const remoteDays = getRemoteDaysForPeriod(
      group,
      auxDate,
      endDate,
      initialState,
      initialWeek,
      remoteWeeks
    );

    const icsContent = getICSFileContent(remoteDays);

    res
      .status(200)
      .setHeader("Content-disposition", "attachment; filename=remote-days.ics")
      .setHeader("Content-type", "text/calendar; charset=utf-8")
      .send(icsContent);
  }
}

const getRemoteDaysForPeriod = (
  group: string,
  auxDate: Date,
  endDate: Date,
  initialState: number[],
  initialWeek: Date,
  remoteWeeks: number[][]
) => {
  let remoteDays: RemoteDay[] = [];

  while (auxDate <= endDate) {
    console.log("Date to export ", auxDate);
    remoteDays.push(
      ...getRemoteDays(
        auxDate.toDateString(),
        group,
        initialState,
        initialWeek,
        remoteWeeks
      )
    );
    auxDate = new Date(auxDate.getFullYear(), auxDate.getMonth() + 1, 1);
  }

  return remoteDays.filter(
    (remoteDay, index, self) =>
      self.findIndex((rd) => rd.date.getTime() === remoteDay.date.getTime()) ===
      index
  );
};

const generateEventUid = (date: Date, weekSequence: number) => {
  return (
    "SIBS-Remote-" +
    date.getFullYear() +
    "-" +
    moment(date).week() +
    "-" +
    weekSequence
  );
};

const startICSCalendar = () => {
  return `BEGIN:VCALENDAR
PRODID:-//SIBSRWP//Remote Days Calendar
VERSION:2.0
X-WR-CALNAME: SIBS Remote Days
CALSCALE:GREGORIAN
`;
};
const endICSCalendar = () => {
  return "END:VCALENDAR";
};
const generateICSEvent = (
  eventName: string,
  eventDesc: string,
  date: Date,
  weekSequence: number
) => {
  const currentTs = moment().utc().format("YYYYMMDDTHHmmss[Z]");
  const eventStarStr = moment(date)
    .set("hours", startHour)
    .format("YYYYMMDDTHHmmss[Z]");
  const eventEndStr = moment(date)
    .set("hours", startHour)
    .add(eventDuration, eventDurationUnit)
    .format("YYYYMMDDTHHmmss[Z]");

  return `BEGIN:VEVENT
DTSTAMP:${currentTs}
LAST-MODIFIED:${currentTs}
DTSTART:${eventStarStr}
DTEND:${eventEndStr}
SUMMARY:${eventName}
UID:${generateEventUid(date, weekSequence)}
DESCRIPTION:${eventDesc}
ORGANIZER:SIBS
END:VEVENT
`;
};
const getICSFileContent = (remoteDays: RemoteDay[]) => {
  let icsContent = startICSCalendar();
  remoteDays.forEach(
    (remoteDay, index) =>
      (icsContent += generateICSEvent(
        "SIBS Remote Day",
        "Generated by https://sibs-rwp.vercel.app",
        remoteDay.date,
        remoteDay.weekSequence
      ))
  );
  icsContent += endICSCalendar();
  return icsContent;
};
